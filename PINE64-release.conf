#!/bin/sh
#
# $FreeBSD$
#

CHROOTDIR=${RELENG_TOP:="/releng/`basename ${JOB_NAME} | sed -e 's#,#/#g'`"}
#RELENGDIR=""
#VCSCMD=""
VCSCMD="git"
#SVNROOT="http://svn.freebsd.org/"
SVNROOT=""
SRCBRANCH="-b shigeru_work https://github.com/bsd-hacker/freebsd.git"
#DOCBRANCH=""
#DOCBRANCH="https://svn.FreeBSD.org/doc/head@rHEAD"
DOCBRANCH="https://github.com/bsd-hacker/freebsd-doc.git"
#PORTBRANCH=""
#PORTBRANCH="https://svn.FreeBSD.org/ports/head@rHEAD"
PORTBRANCH="-b shigeru_work https://github.com/bsd-hacker/freebsd-ports.git"
BRANCH_OVERRIDE="CURRENT-`date +%Y%m%d`"

case ${VCSCMD} in
git)
	SNAPSHOT="-`date +%Y%m%d`-`git rev-parse HEAD`"
	;;

*)
	SNAPSHOT="-`date +%Y%m%d`-`svnlite info ${CHROOTDIR}/usr/src/. | grep '^Revision: ' | awk '{ print $2 }'`"
	;;
esac

if [ "X${VIMAGE}" != "XYES" ]; then
	TARGET_VIMAGE=""
else
	TARGET_VIMAGE="-VIMAGE"
fi

if [ "X${WITNESS}" != "XYES" ]; then
	TARGET_WITNESS=""
else
	TARGET_WITNESS="-WITNESS"
fi

#CHROOT_MAKEENV="TARGET=amd64 TARGET_ARCH=amd64"
#SRCBRANCH="base/head@rHEAD"
EMBEDDEDBUILD=1
EMBEDDED_TARGET="arm64"
EMBEDDED_TARGET_ARCH="aarch64"
EMBEDDEDPORTS="sysutils/u-boot-pine64 security/ca_root_nss"
#KERNEL="GENERIC"
KERNEL="${TARGET_CONF}${TARGET_VIMAGE}${TARGET_WITNESS}"
WORLD_FLAGS="${WORLD_FLAGS} UBLDR_LOADADDR=0x42000000"
IMAGE_SIZE="2560M"
PART_SCHEME="MBR"
FAT_SIZE="63m -b 1m"
FAT_TYPE="16"
MD_ARGS="-x 16384 -y 255"
NODOC=1
export BOARDNAME="PINE64"

arm_install_uboot() {
	UBOOT_DIR="/usr/local/share/u-boot/u-boot-pine64"
	UBOOT_FILE="u-boot-sunxi-with-spl.bin"
	UBOOT_FILES="README ${UBOOT_FILE}"
	FATMOUNT="${DESTDIR%${KERNEL}}fat"
	UFSMOUNT="${DESTDIR%${KERNEL}}ufs"
	# write IPL and u-boot
	chroot ${CHROOTDIR} dd if=${UBOOT_DIR}/${UBOOT_FILE} \
		of=/dev/${mddev} bs=1k seek=8 conv=sync
	chroot ${CHROOTDIR} mkdir -p "${FATMOUNT}" "${UFSMOUNT}"
	chroot ${CHROOTDIR} mount_msdosfs /dev/${mddev}s1 ${FATMOUNT}
	chroot ${CHROOTDIR} mount /dev/${mddev}s2a ${UFSMOUNT}
	for _UF in ${UBOOT_FILES}; do
		chroot ${CHROOTDIR} cp -p ${UBOOT_DIR}/${_UF} \
			${FATMOUNT}/${_UF}
	done
	chroot ${CHROOTDIR} mkdir -p ${FATMOUNT}/dtb
	(export MACHINE=${EMBEDDED_TARGET} ; export DTC="/usr/bin/dtc -H both" ; chroot ${CHROOTDIR} /usr/src/sys/tools/fdt/make_dtb.sh /usr/src/sys /sys/boot/fdt/dts/${EMBEDDED_TARGET}/pine64_plus.dts ${FATMOUNT}/dtb ;)

	BOOTFILES="$(chroot ${CHROOTDIR} \
	    env TARGET=${EMBEDDED_TARGET} TARGET_ARCH=${EMBEDDED_TARGET_ARCH} \
	    WITH_UNIFIED_OBJDIR=yes \
	    make -C ${WORLDDIR}/sys/boot -V .OBJDIR)"
	BOOTFILES="$(chroot ${CHROOTDIR} \
	    realpath ${BOOTFILES})"

	chroot ${CHROOTDIR} mkdir -p ${FATMOUNT}/EFI/BOOT
	chroot ${CHROOTDIR} cp -p ${BOOTFILES}/efi/boot1/boot1.efi \
		${FATMOUNT}/EFI/BOOT/bootaa64.efi
	chroot ${CHROOTDIR} touch ${UFSMOUNT}/firstboot
	sync
	echo umount_loop ${CHROOTDIR}/${FATMOUNT}
	umount_loop ${CHROOTDIR}/${FATMOUNT}
	echo umount_loop ${CHROOTDIR}/${UFSMOUNT}
	umount_loop ${CHROOTDIR}/${UFSMOUNT}
	echo chroot ${CHROOTDIR} rmdir ${FATMOUNT}
	chroot ${CHROOTDIR} rmdir ${FATMOUNT}
	echo chroot ${CHROOTDIR} rmdir ${UFSMOUNT}
	chroot ${CHROOTDIR} rmdir ${UFSMOUNT}
	
	return 0
}
