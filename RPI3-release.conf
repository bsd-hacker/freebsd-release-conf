#!/bin/sh
#
# $FreeBSD$
#

CHROOTDIR=${RELENG_TOP:="/releng/`basename ${JOB_NAME} | sed -e 's#,#/#g'`"}
#RELENGDIR=""
#VCSCMD=""
VCSCMD="git"
#SVNROOT="http://svn.freebsd.org/"
SVNROOT=""
SRCBRANCH="-b shigeru_work https://github.com/bsd-hacker/freebsd.git"
#DOCBRANCH=""
#DOCBRANCH="https://svn.FreeBSD.org/doc/head@rHEAD"
DOCBRANCH="https://github.com/bsd-hacker/freebsd-doc.git"
#PORTBRANCH=""
#PORTBRANCH="https://svn.FreeBSD.org/ports/head@rHEAD"
PORTBRANCH="-b shigeru_work https://github.com/bsd-hacker/freebsd-ports.git"
BRANCH_OVERRIDE="CURRENT-`date +%Y%m%d`"

case ${VCSCMD} in
git)
	SNAPSHOT="-`date +%Y%m%d`-`git rev-parse HEAD`"
	;;

*)
	SNAPSHOT="-`date +%Y%m%d`-`svnlite info ${CHROOTDIR}/usr/src/. | grep '^Revision: ' | awk '{ print $2 }'`"
	;;
esac

if [ "X${VIMAGE}" != "XYES" ]; then
	TARGET_VIMAGE=""
else
	TARGET_VIMAGE="-VIMAGE"
fi

if [ "X${WITNESS}" != "XYES" ]; then
	TARGET_WITNESS=""
else
	TARGET_WITNESS="-WITNESS"
fi

#CHROOT_MAKEENV="TARGET=amd64 TARGET_ARCH=amd64"
#SRCBRANCH="base/head@rHEAD"
EMBEDDEDBUILD=1
EMBEDDED_TARGET="arm64"
EMBEDDED_TARGET_ARCH="aarch64"
EMBEDDEDPORTS="sysutils/u-boot-rpi3 security/ca_root_nss"
#KERNEL="GENERIC"
KERNEL="${TARGET_CONF}${TARGET_VIMAGE}${TARGET_WITNESS}"
WORLD_FLAGS="${WORLD_FLAGS} UBLDR_LOADADDR=0x42000000"
IMAGE_SIZE="2560M"
PART_SCHEME="MBR"
FAT_SIZE="50m -b 1m"
FAT_TYPE="16"
MD_ARGS="-x 63 -y 255"
NODOC=1
DTB_REPO="https://github.com/raspberrypi/firmware/blob/master/boot"
DTB="bcm2710-rpi-3-b.dtb"
OVERLAYS="mmc.dtbo pi3-disable-bt.dtbo pi3-miniuart-bt.dtbo"
export BOARDNAME="RPI3"

arm_install_uboot() {
	UBOOT_DIR="/usr/local/share/u-boot/u-boot-rpi3"
	UBOOT_FILES="LICENCE.broadcom README armstub8.bin bootcode.bin config.txt \
		fixup.dat fixup_cd.dat fixup_x.dat start.elf start_cd.elf \
		start_x.elf u-boot.bin"
	FATMOUNT="${DESTDIR%${KERNEL}}fat"
	UFSMOUNT="${DESTDIR%${KERNEL}}ufs"
	chroot ${CHROOTDIR} mkdir -p "${FATMOUNT}" "${UFSMOUNT}"
	chroot ${CHROOTDIR} mount_msdosfs /dev/${mddev}s1 ${FATMOUNT}
	chroot ${CHROOTDIR} mount /dev/${mddev}s2a ${UFSMOUNT}
	for _UF in ${UBOOT_FILES}; do
		chroot ${CHROOTDIR} cp -p ${UBOOT_DIR}/${_UF} \
			${FATMOUNT}/${_UF}
	done
	chroot ${CHROOTDIR} fetch -o "${FATMOUNT}/${DTB}" "${DTB_REPO}/${DTB}?raw=true"
	chroot ${CHROOTDIR} mkdir -p ${FATMOUNT}/overlays
	for _OL in ${OVERLAYS}; do
		chroot ${CHROOTDIR} fetch -o "${FATMOUNT}/overlays/${_OL}"\
			"${DTB_REPO}/overlays/${_OL}?raw=true"
	done

	BOOTFILES="$(chroot ${CHROOTDIR} \
	    env TARGET=${EMBEDDED_TARGET} TARGET_ARCH=${EMBEDDED_TARGET_ARCH} \
	    WITH_UNIFIED_OBJDIR=yes \
	    make -C ${WORLDDIR}/stand -V .OBJDIR)"
	BOOTFILES="$(chroot ${CHROOTDIR} \
	    realpath ${BOOTFILES})"

	chroot ${CHROOTDIR} mkdir -p ${FATMOUNT}/EFI/BOOT
	chroot ${CHROOTDIR} cp -p ${BOOTFILES}/efi/boot1/boot1.efi \
		${FATMOUNT}/EFI/BOOT/bootaa64.efi
	chroot ${CHROOTDIR} touch ${UFSMOUNT}/firstboot
	sync
	echo umount_loop ${CHROOTDIR}/${FATMOUNT}
	umount_loop ${CHROOTDIR}/${FATMOUNT}
	echo umount_loop ${CHROOTDIR}/${UFSMOUNT}
	umount_loop ${CHROOTDIR}/${UFSMOUNT}
	echo chroot ${CHROOTDIR} rmdir ${FATMOUNT}
	chroot ${CHROOTDIR} rmdir ${FATMOUNT}
	echo chroot ${CHROOTDIR} rmdir ${UFSMOUNT}
	chroot ${CHROOTDIR} rmdir ${UFSMOUNT}
	
	return 0
}
